<!DOCTYPE html>
<html>

<head>
  <title>Upload Files</title>
  <script src="/siofu/client.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
  <link rel="stylesheet" href="/assets/style.css" type="text/css" />
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
    crossorigin="anonymous"></script>

  <script type="text/javascript">

    var socketID;
    var isTaskGiver;
    var isPlayerTurn;
    var canUpload;
    var playerScore;
    var opponent;
    var opponentName;
    var name = '<%=user%>'
    var looper = 0;

    document.addEventListener(
      "DOMContentLoaded",
      function () {
        var socket = io.connect("");

        

        const messageContainer = document.getElementById('message-container')
        const messageForm = document.getElementById('send-container')
        const messageInput = document.getElementById('message-input')

        socket.on('player-info', (player) => {
          socketID = socket.id;
          isTaskGiver = player.task_giver;
          isPlayerTurn = player.player_turn;
          canUpload = player.can_upload;
          playerScore = player.score;
          opponent = player.opponent;
          socket.emit('name-info', { 'name': name, 'sender': socket.id ,'opponent': opponent })
          console.log(name + " PLAYER INFO: \n Socket ID: " + player.socket + "\nOpponent: " + opponent + "\n" + isTaskGiver + "\n" + isPlayerTurn + "\n" + canUpload)
          buttonStateHandler();
        })

        
        socket.on('name-info-response', (data) => {
          opponentTag = document.getElementById('opponent-name')
          opponentName = data.name;
          console.log('OPPONENT NAME: ' + opponentName)
          opponentTag.innerHTML = opponentName + ':';
          while (looper == 0) {
            looper++;
            socket.emit('name2-info', { 'sender': opponent, 'name2': name})   
          }
        })

        

        var siofu = new SocketIOFileUpload(socket);

        siofu.listenOnInput(document.getElementById("upload_input"));

        // Do something on upload progress:
        siofu.addEventListener("progress", function (event) {
          var percent = (event.bytesLoaded / event.file.size) * 100;
          console.log("File is", percent.toFixed(2), "percent loaded");
        });

        // Do something when a file is uploaded:
        siofu.addEventListener("complete", function (event) {
          console.log(event.detail.name);

          var video = document.createElement("video");
          var div_small = document.createElement('div');
          var span_timestamp = document.createElement('span');

          div_small.setAttribute("class", "my-msg");
          var br = document.createElement('br');

          var p_username = document.createElement('p');
          p_username.innerHTML = name;

          video.setAttribute("controls", "controls");

          video.src = 'uploads/' + event.detail.name;

          console.log("VIDEO SRC: " + video.src)

          span_timestamp.setAttribute("class", "timestamp");
          var time = new Date().toLocaleString('pl-PL');
          span_timestamp.innerHTML = time;

          div_small.innerHTML = p_username.outerHTML + span_timestamp.outerHTML + video.outerHTML + br.outerHTML;

          var div = document.getElementById("message-container");
          socket.emit('send-video', { 'opponent': opponent, 'src': video.src, 'name': name, 'timestamp': time })
          div.appendChild(div_small);
          div.appendChild(br)

          isPlayerTurn = false;
          canUpload = false;
          socket.emit('upload-pass-turn', {
            'opponent': opponent,
            'task_giver': isTaskGiver,
            'player_turn': isPlayerTurn,
            'can_upload': canUpload
          })
          buttonStateHandler();
        });

        socket.on('display-video', path => {

          var video = document.createElement("video");
          var div_small = document.createElement('div');
          var span_timestamp = document.createElement('span');

          div_small.setAttribute("class", "other-msg");
          var br = document.createElement('br');

          video.setAttribute("controls", "controls");
          video.src = path.src;

          console.log("VIDEO SRC: " + video.src)

          var p_username = document.createElement('p');
          p_username.innerHTML = path.name;

          span_timestamp.setAttribute("class", "timestamp");
          span_timestamp.innerHTML = path.timestamp;

          div_small.innerHTML = p_username.outerHTML + span_timestamp.outerHTML + video.outerHTML + br.outerHTML;

          var div = document.getElementById("message-container");

          div.append(div_small);
        })


        // @@@@@@@@@ LOGIKA @@@@@@@@@@@@@@@@@@
        socket.on('upload-pass-turn-response', (data) => {
          if (data.task_giver == true
            && data.player_turn == false
            && data.can_upload == false) {
            isTaskGiver = false;
            isPlayerTurn = true;
            canUpload = false;
          }
          else if (
            data.task_giver == false
            && data.player_turn == false
            && data.can_upload == false) {
            isTaskGiver = true;
            isPlayerTurn = true;
            canUpload = false;
          }

          buttonStateHandler()
          console.log(name + " PLAYER INFO: \n" + isTaskGiver + "\n" + isPlayerTurn + "\n" + canUpload)
        })


        socket.on('system-message', (data) => {
          printSysMsg(data.msg);
        })


        socket.on('opponent-info', (data) => {
          console.log(data)
          opponent = data.opponent;
        })

        socket.on('initialize-clock-response', (data) => {
          console.log('CLOCKKKKKKKK: ' + data.id)
          initializeClock(data.id, data.deadline)
        })

        document.querySelector('#ok-button').onclick = () => {
          var deadline = new Date(Date.parse(new Date()) + 5 * 60 * 1000);
          if (
            isPlayerTurn == true
            && canUpload == false) {
            canUpload = true
            buttonStateHandler();
            initializeClock('clockdiv', deadline);
            socket.emit('initialize-clock', { 'id': 'clockdiv', 'deadline': deadline })
          }
        }

        document.querySelector('#nok-button').onclick = () => {
          if (
            isTaskGiver == false
            && isPlayerTurn == true
            && canUpload == false) {
            isTaskGiver = true;
            canUpload = true;
            socket.emit('nok-pass-turn', {
              'opponent': opponent,
              'task_giver': isTaskGiver,
              'player_turn': isPlayerTurn,
              'can_upload': canUpload
            })
            console.log(' ZMIANA ZADAJACEGO')

          } else if (
            isTaskGiver == true
            && isPlayerTurn == true
            && canUpload == false) {
            canUpload = true;
            console.log(name + ' otrzymuje PUNKT !')

            playerScore++;
            playerScoreTag = document.getElementById('player-score')
            playerScoreTag.innerHTML = playerScore;
            socket.emit('send-score', {'socket': socketID,'player_name': name,'opponent': opponent,'opponent_name': opponentName,'score': playerScore})

          }
          buttonStateHandler();
        }

        socket.on('game-over', (data) => {
          console.log("GAME OVER\n"+data)
          if (data.winner == name){
            alert("WYGRAŁEŚ!\nKoniec gry.\nNaciśnij OK, aby wrócic do strony głównej.")
          } else {
            alert("PRZEGRAŁEŚ!\nKoniec gry.\nNaciśnij OK, aby wrócic do strony głównej.")
          }
          window.location = '/';
        })

        socket.on('nok-pass-turn-response', (data) => {
          if (data.task_giver == true
            && data.player_turn == true
            && data.can_upload == true) {
            isTaskGiver = false;
            isPlayerTurn = false;
            canUpload = false;
          }
          else if (
            data.task_giver == false
            && data.player_turn == false
            && data.can_upload == false) {
            isTaskGiver = true;
            isPlayerTurn = true;
            canUpload = false;
          }

          buttonStateHandler()
          console.log(name + " PLAYER INFO: \n" + isTaskGiver + "\n" + isPlayerTurn + "\n" + canUpload)
        })

        socket.on('send-score-response', (data) => {
          opponentScoreTag = document.getElementById('opponent-score')
          opponentScoreTag.innerHTML = data.score;
        })

        function printSysMsg(msg) {
          const p = document.createElement('p');
          p.innerHTML = msg;
          document.querySelector('#message-container').append(p);
        }



      },
      false
    );

    function checkStatus() {
      console.log(name + " PLAYER INFO: \nSocket ID: "+ socketID + "\nOpponent: " + opponent + "\n" + isTaskGiver + "\n" + isPlayerTurn + "\n" + canUpload + '\nScore: ' + playerScore)
    }


    function buttonStateHandler() {
      // Select the element with id and disable it
      const button_ok = document.getElementById("ok-button")
      const button_nok = document.getElementById("nok-button")
      const upload_button = document.getElementById("upload-btn")

      const turnIndicator = document.getElementById("turn")
      const giverIndicator = document.getElementById("is-giver")

      if (isTaskGiver == true
        && isPlayerTurn == true
        && canUpload == true) {
        button_ok.disabled = true;
        button_nok.disabled = true;
        upload_button.disabled = false;
      } else if (
        isTaskGiver == false
        && isPlayerTurn == false
        && canUpload == false) {
        button_ok.disabled = true;
        button_nok.disabled = true;
        upload_button.disabled = true;
      } else if (
        isTaskGiver == true
        && isPlayerTurn == false
        && canUpload == false) {
        button_ok.disabled = true;
        button_nok.disabled = true;
        upload_button.disabled = true;
      } else if (
        isTaskGiver == false
        && isPlayerTurn == true
        && canUpload == false) {
        button_ok.disabled = false;
        button_nok.disabled = false;
        upload_button.disabled = true;
      } else if (
        isTaskGiver == false
        && isPlayerTurn == true
        && canUpload == true) {
        button_ok.disabled = true;
        button_nok.disabled = true;
        upload_button.disabled = false;
      } else if (
        isTaskGiver == true
        && isPlayerTurn == true
        && canUpload == false) {
        button_ok.disabled = false;
        button_nok.disabled = false;
        upload_button.disabled = true;
      }

      if (isPlayerTurn == true) {
        turnIndicator.innerHTML = " TWOJA KOLEJ"
      } else {
        turnIndicator.innerHTML = " KOLEJ PRZECIWNIKA"
      }

      if (isTaskGiver == true) {
        giverIndicator.innerHTML = "ZADAJESZ"
      } else {
        giverIndicator.innerHTML = "POWTARZASZ"
      }

    }


    function getTimeRemaining(endtime) {
      var t = Date.parse(endtime) - Date.parse(new Date());
      var seconds = Math.floor((t / 1000) % 60);
      var minutes = Math.floor((t / 1000 / 60) % 60);
      return {
        'total': t,
        'minutes': minutes,
        'seconds': seconds
      };
    }

    function initializeClock(id, endtime) {
      var clock = document.getElementById(id);
      var minutesSpan = clock.querySelector('.minutes');
      var secondsSpan = clock.querySelector('.seconds');

      function updateClock() {
        var t = getTimeRemaining(endtime);

        minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);
        secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);

        if (t.total <= 0) {
          clearInterval(timeinterval);
        }
      }

      updateClock();
      var timeinterval = setInterval(updateClock, 1000);
    }








  </script>
</head>




<body>



  <div class="container">
    <div class="header" style="text-align: center; margin-top: 1em;">
      <div id="player-div" class="col" style="text-align: center; ">
        <p class="tag">
          <%= user %>:
        </p>
        <span class="score" id="player-score"> 0</span>
      </div>

      <div class="col">

        <span id="is-giver"> </span>
        <div id="turn"></div>

        <div id="timer-div">
          <div id="timer">05:00 </div>
        </div>

        <div id="upl">
          <input class="upload" type="file" id="upload_input" multiple accept="file/*" style="display:none;" />
          <button id="upload-btn" onclick="document.getElementById('upload_input').click();" type="button"
            class="btn btn-warning btn-lg">UPLOAD</button>
        </div>

        <div id="oknok">
          <button id="ok-button" type="button" class="btn btn-success btn-lg">Trick was OK</button>
          <button id="nok-button" type="button" class="btn btn-danger btn-lg">Trick was NOT OK</button>
        </div>
      </div>

      <div id="opponent-div" class="col" style="text-align: center;">
        <p id="opponent-name" class="tag">
          <% if (typeof opponent==='undefined' ) { %>
            Undefined: 
          <% } %>
          
        </p>
       
            <span class="score" id="opponent-score"> 0</span>

      </div>
    </div>


    <div id="message-container">

    </div>




    <!-- A button element that executes "disableButton" function upon clicking -->
    <button onclick="checkStatus()" style="position: fixed;
    padding-bottom: 5px;
    bottom: 0;">CHECK STATUS</button>



    <div id="clockdiv" style="position: fixed;
    padding-bottom: 40px;
    bottom: 0;">
      <div>
        <span class="minutes"></span>
        <div class="smalltext">Minutes</div>
      </div>
      <div>
        <span class="seconds"></span>
        <div class="smalltext">Seconds</div>
      </div>
    </div>


  </div>



</body>

</html>